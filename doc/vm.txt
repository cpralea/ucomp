Registers
    r0, r1, r2, ..., r13                    ; general purpose
    sp, pc                                  ; stack pointer
    flags                                   ; program counter, stack pointer, flags


Instructions
    LOAD        <reg>,      [<reg>]
    STORE       [<reg>],    <reg>
    MOV         <reg>,      <reg>
    MOV         <reg>,      <imm>
    ADD         <reg>,      <reg>
    ADD         <reg>,      <imm>
    SUB         <reg>,      <reg>
    SUB         <reg>,      <imm>
    AND         <reg>,      <reg>
    AND         <reg>,      <imm>
    OR          <reg>,      <reg>
    OR          <reg>,      <imm>
    XOR         <reg>,      <reg>
    XOR         <reg>,      <imm>
    NOT         <reg>
    CMP         <reg>,      <reg>
    CMP         <reg>,      <imm>
    PUSH        <reg>
    POP         <reg>
    CALL        <imm>
    RET
    JMP<cond>   <imm>
where
    <reg>       is any register
    <imm>       is any immediate value
    [<reg>]     is the value at the memory location <reg> points to
    <cond>      n/a, Z, NZ, EQ, NE, GT, LT, GE, LE


Instruction encoding
    |  opcode  | 1st operand    2nd operand |
    |__1 byte__|________1/4/5 bytes_________|


Opcode encoding
    |  operation | imm/reg  |
    |___7 bits___|__1 bit __|
    |________1 byte_________|


Operand encoding
    |   reg    |        |    imm    |
    |__4 bits__|        |__4 bytes__|


Calling convention
    - all parameters passed on stack; cleared by the callee
    - all return values passed on stack; cleared by the caller
    - no registers are preserved between calls


System calls
    Regular CALL to one predefined address:
        CALL $sys_enter
    Parameters are passed in on the stack, as usual, with the one on top representing the system call ID.

    ------------------
    | nth parameter* |
    |      ...       |
    | 2nd parameter* |
    | 1st parameter* |
    | system call ID |
    | return address | <--- top of the stack
    |                |


Memory layout
    0x00000000      JMP 0xXXXXXXXX              ;  $sys_enter
    0x00000005      text                        ; ~1.0 GB
    0x40000000      heap start                  ;  2.5 GB
    0xe0000000      heap end / stack end
    0xffffffff      stack start                 ;  0.5 GB

